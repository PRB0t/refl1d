name: Test

on:
  push:
    branches: [ master_v0 ]
  pull_request:
    branches: [ master_v0 ]
  release:
    types: [ published ]

jobs:
  test_and_build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { os: ubuntu-latest, py: 3.7 }
          - { os: ubuntu-latest, py: 3.8 }
          - { os: ubuntu-latest, py: 3.9 }
          - { os: ubuntu-latest, py: "3.10" }
          - { os: ubuntu-latest, py: "3.11", doc: 1, whl: 1 }
          - { os: ubuntu-latest, py: "3.12" }
          - { os: windows-latest, py: "3.11", exe: 1 }
          - { os: macos-latest, py: "3.11", dmg: 1 }
          # pure python wheels

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.config.py }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.config.py }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install wheel setuptools build
        python -m pip install numpy scipy matplotlib bumps periodictable scikit-learn pytest pytest-cov numba
        pip install -e .
        mkdir release
        mkdir dist

    - name: Run tests
      run: |
        pytest -v
        python check_examples.py --chisq
      env:
        MPLBACKEND: agg

    - name: Check that the docs build (linux only)
      if: matrix.config.doc == 1
      run: |
        python -m pip install sphinx
        make -j 4 -C doc SPHINXOPTS="-W --keep-going" html

    - name: Build binary wheel
      if: matrix.config.whl == 1
      run: |
        python -m build

    - name: Build installer
      if: matrix.config.exe == 1
      run: |
        pwsh -command ".\$GITHUB_WORKSPACE\extra\build_win_installer.ps1"
        mv dist\Refl1D*.zip release\

    - name: Build sasview installer dmg file (OSX)
      if: matrix.config.dmg == 1
      run: |
        cd dist
        hdiutil create Refl1D.dmg -srcfolder Refl1D.app -ov -format UDZO

    - name: Sign executable and create dmg (OSX)
      if: matrix.config.dmg == 1
      env:
        MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE_ISA }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_ISA_PWD }}
        DEVELOPER_NAME: "Developer ID Application: The International Scattering Alliance (8CX8K63BQM)"
        APP_NAME: Refl1D.app
      run: |
        # TODO: GIve app more descriptive name (version, etc)
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
        security create-keychain -p DloaAcYP build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p DloaAcYP build.keychain
        security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k DloaAcYP build.keychain
        security find-identity -p codesigning
        
        cd dist
        # TODO: Include entitlements
        codesign --verify --options=runtime --timestamp --deep --verbose=4 --force --sign $DEVELOPER_NAME $APP_NAME
        hdiutil create Refl1D.dmg -srcfolder $APP_NAME -ov -format UDZO
        codesign -s $DEVELOPER_NAME $APP_NAME

    - name: Notarize Release Build (OSX)
      if: matrix.config.dmg == 1
      uses: lando/notarize-action@v2
      with:
        product-path: "dist/Refl1D.dmg"
        primary-bundle-id: "org.orso.Refl1D"
        appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
        appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}
        appstore-connect-team-id: W2AG9MPZ43
        verbose: True

    - name: Staple Release Build (OSX)
      if: matrix.config.dmg == 1
      uses: BoundfoxStudios/action-xcode-staple@v1
      with:
        product-path: "dist/Refl1D.dmg"

    # See the following for how to upload to a release
    #  https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/
    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artifacts-${{ matrix.config.os }}-${{ matrix.config.py }}
        path: |
          dist/*.dmg
          dist/*.whl
          dist/*.zip
          dist/*.tar.gz
          release/*.zip

  publish:
    needs: test_and_build
    runs-on: ubuntu-latest
    steps:
    - name: Retrieve all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: artifacts-*
        merge-multiple: true

    - name: show files
      run: |
        ls -R artifacts
        echo "WINDOWS_INSTALLER=$(ls artifacts/release/*.zip)" >> $GITHUB_ENV
        echo "MACOS_INSTALLER=$(ls artifacts/release/*.dmg)" >> $GITHUB_ENV
        echo "SRC_DIST=$(ls artifacts/dist/*.tar.gz)" >> $GITHUB_ENV
        echo "PY3_WHL=$(ls artifacts/dist/*.whl)" >> $GITHUB_ENV

    - name: Update current release
      if: startsWith(github.ref, 'refs/tags')
      uses: johnwbyrd/update-release@v1.0.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          ${{ env.WINDOWS_INSTALLER }}
          ${{ env.PY3_WHL }}

    - name: publish distribution to Test PyPI
      env:
        TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
      if: env.TEST_PYPI_API_TOKEN != null
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        packages-dir: artifacts/dist/

    - name: Publish distribution to PyPI
      if: startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: artifacts/dist/
