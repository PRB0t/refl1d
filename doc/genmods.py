from __future__ import with_statement
import os.path
import inspect
import sys

sys.path.append(os.path.abspath('..'))
sys.path.append(os.path.abspath('../dream'))

MODULE_TEMPLATE=""".. Autogenerated by genmods.py -- DO NOT EDIT --

******************************************************************************
%(prefix)s%(module)s
******************************************************************************

.. currentmodule:: %(package)s.%(module)s

.. autosummary::
   :nosignatures:

   %(members)s

.. automodule:: %(package)s.%(module)s
   :members:
   :undoc-members:
   :inherited-members:
   :show-inheritance:

"""

INDEX_TEMPLATE=""".. Autogenerated by genmods.py -- DO NOT EDIT --

.. _api-index:

##############################################################################
Reference
##############################################################################

.. only:: html

   :Release: |version|
   :Date: |today|

.. toctree::
   :hidden:

   %(rsts)s

**Modules defined within Refl1D**

.. currentmodule:: %(package)s

.. autosummary::

   %(mods)s

"""

def getmembers(package, module):
    name = package+"."+module
    __import__(name)
    M = sys.modules[name]
    try:
        L = M.__all__
    except:
        L = [s for s in dir(M)
             if inspect.getmodule(getattr(M,s)) == M and not s.startswith('_')]
    return L

def genfiles(package, modules, dir='api', absolute=True):

    prefix = package+"." if absolute else ""
    if not os.path.exists(dir):
        os.makedirs(dir)
    for module in modules:
        members = "\n    ".join(getmembers(package, module))
        with open(os.path.join(dir,module+'.rst'), 'w') as f:
            f.write(MODULE_TEMPLATE%locals())
    rsts = "\n   ".join(module+'.rst' for module in modules)
    mods = "\n   ".join(prefix+module for module in modules)

    with open(os.path.join(dir,'index.rst'),'w') as f:
        f.write(INDEX_TEMPLATE%locals())


modules=[
#    ('__init__', 'Top level namespace'),
    ('instrument', 'Instrument'),
    ('resolution', 'Resolution'),
    ('material', 'Material'),
    ('materialdb', 'Materials Database'),
    ('model', 'Reflectivity Models'),
    ('reflectivity', 'Reflectivity'),
    ('profile', 'Model Profile'),
    #('interface', 'Interface'),
    ('experiment', 'Experiment'),
    ('polymer', 'Polymer'),
    ('cheby', 'Freeform - Chebyshev'),
    ('mono', 'Freeform - Monotonic Spline'),
    ('freeform', 'Freeform - Parametric B-Spline'),
    #('magnetic', 'Magnetic Models'),
    ('ncnrdata', 'NCNR Data'),
    ('snsdata', 'SNS Data'),
    ('staj', 'Staj File'),
    ('stajconvert', 'Staj File Converter'),
    ('probe', 'Instrument Probe'),
    ('mystic.parameter', 'Parameters'),
    ('mystic.bounds', 'Bounds'),
    ('mystic.formatnum', 'Format numbers'),
]
package='refl1d'
genfiles(package, sorted(m for m,_ in modules))
