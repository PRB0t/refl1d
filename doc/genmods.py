from __future__ import with_statement
import os.path
import inspect
import sys

from distutils.util import get_platform
platform = '.%s-%s'%(get_platform(),sys.version[:3])
build_lib = os.path.abspath('../build/lib'+platform)
sys.path.insert(0, build_lib)

print "path:\n"+"\n".join(sys.path)

MODULE_TEMPLATE=""".. Autogenerated by genmods.py -- DO NOT EDIT --

******************************************************************************
%(prefix)s%(module)s - %(title)s
******************************************************************************

.. currentmodule:: %(package)s.%(module)s

.. autosummary::
   :nosignatures:

   %(members)s

.. automodule:: %(package)s.%(module)s
   :members:
   :undoc-members:
   :inherited-members:
   :show-inheritance:

"""

INDEX_TEMPLATE=""".. Autogenerated by genmods.py -- DO NOT EDIT --

.. %(package)s_api_index_:

##############################################################################
Reference for %(package)s
##############################################################################

.. only:: html

   :Release: |version|
   :Date: |today|

.. toctree::
   :hidden:

   %(rsts)s

**Modules defined within %(package)s**

.. currentmodule:: %(package)s

.. autosummary::

   %(mods)s

"""

def getmembers(package, module):
    name = package+"."+module
    __import__(name)
    M = sys.modules[name]
    try:
        L = M.__all__
    except:
        L = [s for s in dir(M)
             if inspect.getmodule(getattr(M,s)) == M and not s.startswith('_')]
    return L

def genfiles(package, modules, dir='api', absolute=True):

    prefix = package+"." if absolute else ""
    if not os.path.exists(dir):
        os.makedirs(dir)
    for (module, title) in modules:
        members = "\n    ".join(getmembers(package, module))
        with open(os.path.join(dir,module+'.rst'), 'w') as f:
            f.write(MODULE_TEMPLATE%locals())
    rsts = "\n   ".join(module+'.rst' for module,_ in modules)
    mods = "\n   ".join(prefix+module for module,_ in modules)

    with open(os.path.join(dir,'index.rst'),'w') as f:
        f.write(INDEX_TEMPLATE%locals())


refl1d_modules=[
    #('__init__', 'Top level namespace'),
    #('interface', 'Interface'),
    ('abeles', 'Pure python reflectivity calculator'),
    ('cheby', 'Freeform - Chebyshev model'),
    #('composition', 'Composition space model'),
    #('corrtest', 'Test for residual structure'),
    ('dist','Non-uniform samples'),
    ('errors','Plot sample profile uncertainty'),
    ('experiment', 'Reflectivity fitness function'),
    ('fitplugin', 'Bumps plugin definition for reflectivity models'),
    ('freeform', 'Freeform - Parametric B-Spline'),
    ('fresnel', 'Pure python Fresnel reflectivity calculator'),
    ('garefl', 'Adaptor for garefl models'),
    ('instrument', 'Reflectivity instrument definition'),
    #('interface', 'Models of interfacial roughness'),
    ('magnetic', 'Magnetic Models'),
    ('material', 'Material'),
    ('materialdb', 'Materials Database'),
    ('model', 'Reflectivity Models'),
    ('mono', 'Freeform - Monotonic Spline'),
    ('names', 'Public API'),
    ('ncnrdata', 'NCNR Data'),
    #('plottable', 'Style-based plot definitions'),
    ('polymer', 'Polymer models'),
    ('probe', 'Instrument probe'),
    ('profile', 'Model profile'),
    ('reflectivity', 'Reflectivity'),
    ('reflmodule','Low level reflectivity calculations'),
    ('resolution', 'Resolution'),
    ('snsdata', 'SNS Data'),
    ('staj', 'Staj File'),
    ('stajconvert', 'Staj File Converter'),
    ('stitch', 'Overlapping reflectivity curve stitching'),
    ('support', 'Environment support'),
    ('util','Miscellaneous functions'),
]
bumps_modules = [
    ('__init__', 'Bumps package'),
    ('bounds', 'Bounds'),
    ('bspline', 'B-Spline interpolation library'),
    ('cheby', 'Chebyshev polynomial interpolation library'),
    ('cli', 'Command line interface'),
    ('curve', 'Build a model from y=f(x;pars)'),
    ('data', 'Data handling functions'),
    ('errplot', 'Plot model uncertainty from posterior sample'),
    ('fitproblem', 'Interface between models and fitters'),
    ('fitservice', 'Remote job plugin for fit jobs'),
    ('fitters', 'Wrappers for various optimization algorithms'),
    ('formatnum', 'Format numbers'),
    ('history', 'Optimizer traces'),
    ('initpop', 'Population initialization strategies'),
    ('mapper', 'Parallel processing implementations'),
    ('modelfn', 'Build a model from p = f(pars)'),
    ('monitor', 'Optimizer monitoring'),
    ('mono', 'Monotonic spline interpolation library'),
    ('names', 'Public API'),
    ('numpyerrors', 'Decorator for function level error behaviour'),
    ('parameter', 'Parameters'),
    ('partemp', 'Parallel tempering optimizer'),
    ('plotutil', 'Plotting utilities'),
    ('plugin', 'Plugin interface for domain specific modellers'),
    ('pmath', 'Parameter math, such as sin(P)'),
    ('pytwalk', 'MCMC error analysis using T-Walk steps'),
    ('quasinewton', 'BFGS quasi-newton optimizer'),
    ('random_lines', 'random lines and particle swarm optimizers'),
    ('rebin', 'Data rebinning'),
    ('simplex','Nelder-Mead simplex optimizer (amoeba)'),
    ('util','Miscellaneous functions'),
    ('wsolve','Weighted linear and polynomial solver with uncertainty'),
]
genfiles('refl1d', refl1d_modules, dir='api')
#genfiles('bumps',bumps_modules, dir='bumps_api')
