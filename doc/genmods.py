from __future__ import with_statement
import os.path
import inspect
import sys

sys.path.append(os.path.abspath('..'))
sys.path.append(os.path.abspath('../dream'))

MODULE_TEMPLATE=""".. Autogenerated by genmods.py -- DO NOT EDIT --

******************************************************************************
%(prefix)s%(module)s - %(title)s
******************************************************************************

.. currentmodule:: %(package)s.%(module)s

.. autosummary::
   :nosignatures:

   %(members)s

.. automodule:: %(package)s.%(module)s
   :members:
   :undoc-members:
   :inherited-members:
   :show-inheritance:

"""

INDEX_TEMPLATE=""".. Autogenerated by genmods.py -- DO NOT EDIT --

.. _api-index:

##############################################################################
Reference
##############################################################################

.. only:: html

   :Release: |version|
   :Date: |today|

.. toctree::
   :hidden:

   %(rsts)s 
**Modules defined within Refl1D**

.. currentmodule:: %(package)s

.. autosummary::

   %(mods)s

"""

def getmembers(package, module):
    name = package+"."+module
    __import__(name)
    M = sys.modules[name]
    try:
        L = M.__all__
    except:
        L = [s for s in dir(M)
             if inspect.getmodule(getattr(M,s)) == M and not s.startswith('_')]
    return L

def genfiles(package, modules, dir='api', absolute=True):

    prefix = package+"." if absolute else ""
    if not os.path.exists(dir):
        os.makedirs(dir)
    for (module, title) in modules:
        members = "\n    ".join(getmembers(package, module))
        with open(os.path.join(dir,module+'.rst'), 'w') as f:
            f.write(MODULE_TEMPLATE%locals())
    rsts = "\n   ".join(module+'.rst' for module,_ in modules)
    mods = "\n   ".join(prefix+module for module,_ in modules)

    with open(os.path.join(dir,'index.rst'),'w') as f:
        f.write(INDEX_TEMPLATE%locals())


modules=[
#    ('__init__', 'Top level namespace'),
    #('interface', 'Interface'),
    ('bspline', 'Parametric B-Spline support library'), 
    ('cheby', 'Freeform - Chebyshev'),
    ('experiment', 'Experiment'),
    ('freeform', 'Freeform - Parametric B-Spline'),
    ('instrument', 'Instrument'),
    ('magnetic', 'Magnetic Models'),
    ('material', 'Material'),
    ('materialdb', 'Materials Database'),
    ('model', 'Reflectivity Models'),
    ('mono', 'Freeform - Monotonic Spline'),
    ('ncnrdata', 'NCNR Data'),
    ('polymer', 'Polymer'),
    ('probe', 'Instrument Probe'),
    ('profile', 'Model Profile'),
    ('reflectivity', 'Reflectivity'),
    ('resolution', 'Resolution'),
    ('snsdata', 'SNS Data'),
    ('staj', 'Staj File'),
    ('stajconvert', 'Staj File Converter'),
    ('mystic.parameter', 'Parameters'),
    ('mystic.bounds', 'Bounds'),
    ('mystic.formatnum', 'Format numbers'),
]
package='refl1d'
genfiles(package, modules)
