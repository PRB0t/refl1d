#!/usr/bin/env python

# Copyright (C) 2006-2011, University of Maryland
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/ or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# Author: James Krycka

"""
This module runs the Refl1D Reflectometry Modeler application in GUI mode.
It creates the initial wxPython frame, presents a splash screen to the user,
and then constructs the rest of the GUI.

From the command line, the application can be run as follows:

$ python reflgui [<optional parameters>]

The following is a list of command line parameters for development and
debugging purposes.  None are documented and they may change at any time.

Options for showing diagnostic info:
    --platform      Display platform specific info, especially about fonts
    --syspath       Display the contents of sys.path
    --time          Display diagnostic timing information

Options for overriding the default font and point size attributes where
parameters within each set are mutually exclusive (last one takes precedence):
    --arial, --tahoma, --verdana
    --6pt, --7pt, --8pt, --9pt, --10pt, --11pt, --12pt

Options for controlling the development and testing environment:
    --inspect       Run the wxPython Widget Inspection Tool in a debug window
"""

#==============================================================================

import os
import sys
import time

import wx

# When this script is run interactively (i.e., from a Python command prompt),
# sys.path needs to be updated for some imports to work, namely 'from refl1d'
# and 'from dream'.  However, when this module is executed from a frozen image,
# sys.path will be automatically setup to include the full path of the frozen
# image and python will be able to perform the aforementioned imports.  Thus,
# for the interactive case, we will augment sys.path.  Assumptions:
#   <root> is the top-level directory of the package, it can have any name
#   script dir -> <root>/bin
#   'from refl1d' -> <root>/refl1d
#   'from dream' -> <root>/dream/dream
# Although <root> is currently named 'refl1d', it does not have an__init__.py.
# Likewise, <root>/dream does not have an __init__.py file.
if not hasattr(sys, 'frozen'):
    path = os.path.realpath(__file__)
    root = os.path.abspath(os.path.join(os.path.dirname(path), '..'))
    sys.path.insert(0, root)
    sys.path.insert(1, os.path.join(root, 'dream'))

from refl1d.gui.about import APP_TITLE
from refl1d.gui.app_frame import AppFrame
from refl1d.gui.utilities import (get_appdir, get_datadir, get_rootdir,
                                  get_rootdir_parent, log_time)

# Desired default initial window size (if physical screen size permits).
DISPLAY_WIDTH = 1200
DISPLAY_HEIGHT = 900

# Splash screen picture and timeout value.
SPLASH_SCREEN_FILE = "refl1d_splash.jpg"
SPLASH_SCREEN_TIMEOUT = 4000  # in miliseconds
SPLASH_SCREEN_SCALE = 0.6  # scale factor relative to frame dimensions

# Diagnostic timing information.
LOGTIM = True if (len(sys.argv) > 1 and '--time' in sys.argv[1:]) else False

#==============================================================================

class ReflGUIApp(wx.App):
    """
    This class builds the wxPython GUI for the Refl1D Reflectometry Modeler
    application.
    """

    # Design note: The application frame is created, then the splash screen is
    # displayed, and finally the frame is populated.  The frame initialization
    # is performed in two parts so that the splash screen is visible while the
    # application specific packages are imported and the application is set up.
    # Once the application frame is initialized, the splash screen can exit
    # (via timeout or mouse click) which causes the frame to be made visible.

    def OnInit(self):
        # Determine the position and size of the application frame base on the
        # screen real estate that we have to work with.  Indirectly, this also
        # will determine the position and size of the splash screen window.
        pos, size = self.window_placement()
        #print "window pos and size =", pos, size

        # Create a basic application frame without any child panels.
        self.frame = AppFrame(parent=None, title=APP_TITLE, pos=pos, size=size)

        # Display a splash screen on top of the frame which is not yet visible.
        if LOGTIM: log_time("Starting to display the splash screen")
        self.display_splash_screen()

        # Create the graphical user interface for the application on the frame.
        if LOGTIM: log_time("Starting to build the GUI on the frame")
        self.frame.init_GUI()

        # To test that the splash screen will not go away until the frame
        # initialization is complete, simulate an increase in frame startup
        # time by taking a nap.
        #time.sleep(6)

        # Delay showing the frame until the splash screen has exited.  To have
        # the spash screen visible over the frame, comment out the line below.
        #self.frame.Show(True)

        # Make the application frame the top window when it is shown.
        self.SetTopWindow(self.frame)

        # The splash screen can be dismissed by the user via a left mouse click
        # as soon as the wxPython event loop is entered (i.e. when the caller
        # executes app.MainLoop()).  Otherwise, the splash screen will stop
        # itself when its timeout expires.
        return True

    def window_placement(self):
        """
        Determines the position and size of the application frame such that it
        fits on the user's screen without obstructing (or being obstructed by)
        the Windows task bar.  The maximum initial size in pixels is bounded by
        DISPLAY_WIDTH x DISPLAY_HEIGHT.  For most monitors, the application
        will be centered on the screen; for very large monitors it will be
        placed on the left side of the screen.
        """

        xpos = ypos = 0

        # Note that when running Linux and using an Xming (X11) server on a PC
        # with a dual  monitor configuration, the reported display size may be
        # that of both monitors combined with an incorrect display count of 1.
        # To avoid displaying this app across both monitors, we check for
        # screen 'too big'.  If so, we assume a smaller width which means the
        # application will be placed towards the left hand side of the screen.

        j, k, x, y = wx.Display().GetClientArea() # size excludes task bar
        if len(sys.argv) > 1 and '--platform' in sys.argv[1:]:
            w, h = wx.DisplaySize()  # size includes task bar area
            print "*** Reported screen size including taskbar is %d x %d"%(w, h)
            print "*** Reported screen size excluding taskbar is %d x %d"%(x, y)

        if x > 1920: x = 1280  # display on left side, not centered on screen
        if x > DISPLAY_WIDTH:  xpos = (x - DISPLAY_WIDTH)/2
        if y > DISPLAY_HEIGHT: ypos = (y - DISPLAY_HEIGHT)/2

        # Return the suggested position and size for the application frame.
        return (xpos, ypos), (min(x, DISPLAY_WIDTH), min(y, DISPLAY_HEIGHT))

    def display_splash_screen(self):
        """Displays the splash screen."""

        # Prepare the picture.
        x, y = self.frame.GetSizeTuple()
        ssx = SPLASH_SCREEN_SCALE * x
        ssy = SPLASH_SCREEN_SCALE * y
        image = wx.Image(os.path.join(get_datadir(), SPLASH_SCREEN_FILE),
                         wx.BITMAP_TYPE_JPEG)
        image.Rescale(ssx, ssy, wx.IMAGE_QUALITY_HIGH)
        bm = image.ConvertToBitmap()

        # Create and show the splash screen.  It will disappear only when the
        # program has entered the event loop AND either the timeout has expired
        # or the user has left clicked on the screen.  Thus any processing
        # performed by the calling routine (including doing imports) will
        # prevent the splash screen from disappearing.
        splash = wx.SplashScreen(bitmap=bm,
                                 splashStyle=(wx.SPLASH_CENTRE_ON_PARENT|
                                              wx.SPLASH_TIMEOUT|
                                              wx.STAY_ON_TOP),
                                 milliseconds=SPLASH_SCREEN_TIMEOUT,
                                 parent=self.frame,
                                 id=wx.ID_ANY)

        splash.Bind(wx.EVT_CLOSE, self.OnCloseSplashScreen)


    def OnCloseSplashScreen(self, event):
        """
        Make the application frame visible when the splash screen is closed.
        """

        # To show the frame earlier, uncomment Show() code in OnInit.
        if LOGTIM: log_time("Terminating splash screen and showing the frame")
        self.frame.Show(True)
        event.Skip()

#==============================================================================

if __name__ == '__main__':
    if LOGTIM: log_time("Starting Refl1D")

    # Instantiate the application class and give control to wxPython.
    app = ReflGUIApp(redirect=False, filename=None)

    # For wx debugging, load the wxPython Widget Inspection Tool if requested.
    # It will cause a separate interactive debugger window to be displayed.
    if len(sys.argv) > 1 and '--inspect' in sys.argv[1:]:
        import wx.lib.inspection
        wx.lib.inspection.InspectionTool().Show()

    # Allow the user to interact with the application.
    if LOGTIM: log_time("Finished building the GUI and entering event loop")

    if len(sys.argv) > 1 and '--syspath' in sys.argv[1:]:
        print "*** Application directory is:   ", get_appdir()
        print "*** Data directory is:          ", get_datadir()
        print "*** Package root directory is:  ", get_rootdir()
        print "*** Parent of root directory is:", get_rootdir_parent()
        print "*** Python path is:"
        for i, p in enumerate(sys.path):
            print "%5d  %s" %(i, p)

    app.MainLoop()
